//===-- ARCompactISelDAGToDAG.cpp - A dag to dag inst selector for ARCompact ----===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the ARCompact target.
//
//===----------------------------------------------------------------------===//

#include "ARCompactSubtarget.h"
#include "ARCompactTargetMachine.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
using namespace llvm;

/// ARCompactDAGToDAGISel - ARCompact specific code to select ARCompact machine
/// instructions for SelectionDAG operations.
namespace {
  class ARCompactDAGToDAGISel : public SelectionDAGISel {
    const ARCompactSubtarget &Subtarget;
    ARCompactTargetMachine& TM;

  public:
    ARCompactDAGToDAGISel(ARCompactTargetMachine &tm, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(tm, OptLevel),
        Subtarget(*tm.getSubtargetImpl()),
        TM(tm) { }

    virtual const char *getPassName() const {
      return "ARCompact DAG->DAG Pattern Instruction Selection";
    }

  // Include the pieces autogenerated from the target description.
  #include "ARCompactGenDAGISel.inc"

  private:
    SDNode *Select(SDNode *N);
  };
}  // end anonymous namespace

SDNode *ARCompactDAGToDAGISel::Select(SDNode *Op) {
  DebugLoc dl = Op->getDebugLoc();

  if (Op->isMachineOpcode()) {
    // This is an ARCompact instruction - it has already been selected.
    return NULL;
  }

  // Check if we need to do anything extra for the node.
  switch (Op->getOpcode()) {
    default: 
      // Do nothing - let SelectCode handle it.
      break;
  }

  // SelectCode is generated by tablegen.
  return SelectCode(Op);
}

/// createARCompactISelDag - This pass converts a legalized DAG into a
/// ARCompact-specific DAG, ready for instruction scheduling.
FunctionPass *llvm::createARCompactISelDag(ARCompactTargetMachine &TM,
                                        CodeGenOpt::Level OptLevel) {
  return new ARCompactDAGToDAGISel(TM, OptLevel);
}
